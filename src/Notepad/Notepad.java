/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Notepad;

/**
 *
 * @author Παύλος Μπόλκας
 */
import Utilities.*; // library to import all the functions for the correction of the file
import java.awt.Image;
import java.io.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import DoubleLinkedList.*;//library to use the double linked list data structure
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import static java.lang.Thread.yield;
import object.*;//library to use the objects word,text,punctuation
import javax.swing.undo.*;//library to use the undo utilization 
import java.lang.Thread.*;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Notepad extends javax.swing.JFrame {

    String name = ""; // variable to store the filename
    String text = ""; // variable to store all the text typed or loaded
    Utilities utils = new Utilities(); // create object of utilities to use all teh functions inside
    UndoManager um = new UndoManager();// create object of undomanager to have the utilitie of the undo and redo
    Text theText;

    public void setImage() { //sets the icon images in the upper left side of the windows
        ImageIcon icon = new ImageIcon(".\\notepad.jpg");
        Image img = icon.getImage();
        this.setIconImage(img);
        About_Dialog.setIconImage(img);
    }

    public void setFontSizes() { // sets all the possible font sizes that can be selected
        for (int i = 12; i < 73; i++) {
            if (i % 4 == 0) {
                fontSizes.addItem(i);
            }
        }
    }

    public Notepad() {
        initComponents();
        /*correctInstantlyThread.setDaemon(true);
         correctWithProbablesThread.setDaemon(true);
         setDone.setDaemon(true);*/

        this.setTitle("Smartpad");//sets the title to the window as "Smartpad"
        setImage();//calls the setImage method to set the imageicons of the windows
        countWC.setText("Characters : 0 Words : 0 "); // initializes the wordcount and character count field
        toolbar.setEnabled(true);//sets the toolbar to be enabled and can be removed from the window
        this.setSize(700, 500);//sets the size of the window
        this.setLocation(300, 30);//sets the window int this position int the screen

        theTextPanel.getDocument().addUndoableEditListener(um);//add undo to myText (the text area)
        theTextPanel.setComponentPopupMenu(rclick); //sets a popup menu to be shown inside the text panel
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        choose = new javax.swing.JFileChooser();
        rclick = new javax.swing.JPopupMenu();
        checkThisWord = new javax.swing.JMenuItem();
        insert_word = new javax.swing.JMenuItem();
        cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        About_Dialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        image = new javax.swing.JLabel();
        about_text = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        myText = new javax.swing.JTextArea();
        fonts = new javax.swing.JComboBox();
        fontSizes = new javax.swing.JComboBox();
        pan = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        theTextPanel = new javax.swing.JTextPane();
        toolbar = new javax.swing.JToolBar();
        countWC = new javax.swing.JLabel();
        tool_Open = new javax.swing.JButton();
        toolSave = new javax.swing.JButton();
        tool_SaveAs = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        undoIconOnBar = new javax.swing.JButton();
        redoIconOnBar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        correctIcon = new javax.swing.JButton();
        wordSelector = new javax.swing.JComboBox();
        next = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        Save_as = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        clear = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        undoOperation = new javax.swing.JMenuItem();
        redoOperation = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Cut = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        insert_to_Dict = new javax.swing.JMenuItem();
        fast = new javax.swing.JMenuItem();
        Check = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        checkThisWord.setText("Check this word");
        checkThisWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkThisWordActionPerformed(evt);
            }
        });
        rclick.add(checkThisWord);

        insert_word.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, java.awt.event.InputEvent.CTRL_MASK));
        insert_word.setText("Insert word");
        insert_word.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insert_wordActionPerformed(evt);
            }
        });
        rclick.add(insert_word);

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        rclick.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        rclick.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        rclick.add(paste);

        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        image.setMaximumSize(new java.awt.Dimension(750, 1000));

        about_text.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(about_text, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(image, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(about_text, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout About_DialogLayout = new javax.swing.GroupLayout(About_Dialog.getContentPane());
        About_Dialog.getContentPane().setLayout(About_DialogLayout);
        About_DialogLayout.setHorizontalGroup(
            About_DialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        About_DialogLayout.setVerticalGroup(
            About_DialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        myText.setColumns(20);
        myText.setRows(5);
        jScrollPane1.setViewportView(myText);

        fonts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontsActionPerformed(evt);
            }
        });

        fontSizes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizesActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        theTextPanel.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                theTextPanelCaretUpdate(evt);
            }
        });
        theTextPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                theTextPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                theTextPanelMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(theTextPanel);

        javax.swing.GroupLayout panLayout = new javax.swing.GroupLayout(pan);
        pan.setLayout(panLayout);
        panLayout.setHorizontalGroup(
            panLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
            .addGroup(panLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
        );
        panLayout.setVerticalGroup(
            panLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
            .addGroup(panLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
        );

        getContentPane().add(pan, java.awt.BorderLayout.CENTER);

        toolbar.setRollover(true);
        toolbar.add(countWC);

        tool_Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/open.png"))); // NOI18N
        tool_Open.setFocusable(false);
        tool_Open.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tool_Open.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tool_OpenActionPerformed(evt);
            }
        });
        toolbar.add(tool_Open);

        toolSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/save.png"))); // NOI18N
        toolSave.setFocusable(false);
        toolSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolSaveActionPerformed(evt);
            }
        });
        toolbar.add(toolSave);

        tool_SaveAs.setText("Save as...");
        tool_SaveAs.setFocusable(false);
        tool_SaveAs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tool_SaveAs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tool_SaveAsActionPerformed(evt);
            }
        });
        toolbar.add(tool_SaveAs);
        toolbar.add(jSeparator7);

        undoIconOnBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/undo-icon.png"))); // NOI18N
        undoIconOnBar.setFocusable(false);
        undoIconOnBar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undoIconOnBar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undoIconOnBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoIconOnBarActionPerformed(evt);
            }
        });
        toolbar.add(undoIconOnBar);

        redoIconOnBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/Redo.png"))); // NOI18N
        redoIconOnBar.setFocusable(false);
        redoIconOnBar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redoIconOnBar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redoIconOnBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoIconOnBarActionPerformed(evt);
            }
        });
        toolbar.add(redoIconOnBar);
        toolbar.add(jSeparator3);

        correctIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/correct.png"))); // NOI18N
        correctIcon.setFocusable(false);
        correctIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        correctIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        correctIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correctIconActionPerformed(evt);
            }
        });
        toolbar.add(correctIcon);

        toolbar.add(wordSelector);

        next.setText("next");
        next.setFocusable(false);
        next.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        next.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        toolbar.add(next);

        getContentPane().add(toolbar, java.awt.BorderLayout.PAGE_START);

        File.setText("File");
        File.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FileMouseClicked(evt);
            }
        });

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/open.png"))); // NOI18N
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/save.png"))); // NOI18N
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        File.add(Save);

        Save_as.setText("Save as...");
        Save_as.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_asActionPerformed(evt);
            }
        });
        File.add(Save_as);
        File.add(jSeparator2);

        clear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        clear.setText("Close file");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        File.add(clear);
        File.add(jSeparator5);

        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/Exit.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitMouseClicked(evt);
            }
        });
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Edit.setText("Edit");

        undoOperation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoOperation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/undo-icon.png"))); // NOI18N
        undoOperation.setText("Undo");
        undoOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoOperationActionPerformed(evt);
            }
        });
        Edit.add(undoOperation);

        redoOperation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoOperation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/Redo.png"))); // NOI18N
        redoOperation.setText("Redo");
        redoOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoOperationActionPerformed(evt);
            }
        });
        Edit.add(redoOperation);
        Edit.add(jSeparator1);

        Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Cut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/cut.png"))); // NOI18N
        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        Edit.add(Cut);

        Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/copy.png"))); // NOI18N
        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        Edit.add(Copy);

        Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Paste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/paste.png"))); // NOI18N
        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        Edit.add(Paste);
        Edit.add(jSeparator8);

        insert_to_Dict.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        insert_to_Dict.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/add.png"))); // NOI18N
        insert_to_Dict.setText("Insert to dictionary");
        insert_to_Dict.setToolTipText("This option inserts the highlighted text to dictionary");
        insert_to_Dict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insert_to_DictActionPerformed(evt);
            }
        });
        Edit.add(insert_to_Dict);

        fast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Notepad/correct.png"))); // NOI18N
        fast.setText("Correct the file");
        fast.setToolTipText("This option corrects the file showing you probable words");
        fast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastActionPerformed(evt);
            }
        });
        Edit.add(fast);

        Check.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.CTRL_MASK));
        Check.setText("Correct instantly");
        Check.setToolTipText("This option corrects all the words in file without asking you");
        Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckActionPerformed(evt);
            }
        });
        Edit.add(Check);

        jMenuBar1.add(Edit);

        Help.setText("Help");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Save_asActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_asActionPerformed
        saveAs();//calls this method to save the file loaded or the new file to the disk
    }//GEN-LAST:event_Save_asActionPerformed

    private void FileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FileMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_FileMouseClicked

    private void ExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitMouseClicked

    }//GEN-LAST:event_ExitMouseClicked

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);//exits the app and terminates java
    }//GEN-LAST:event_ExitActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        open();//opens a file and loads it in the text area

    }//GEN-LAST:event_OpenActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        save();//saves the file to hard disk
    }//GEN-LAST:event_SaveActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        //this method clears the text
        theTextPanel.setText("");//set text to thetextpanel to nothing
        //myText.setText("");//set text to mytext to nothing
        this.setTitle("Smartpad"); //sets the window title to Smartpad
        name = "";//clears the filename

    }//GEN-LAST:event_clearActionPerformed

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed

        theTextPanel.paste();//pastes a copied or cut piece of text
    }//GEN-LAST:event_PasteActionPerformed

    private void CheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckActionPerformed
        // calls the method to correct the text

    }//GEN-LAST:event_CheckActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
    }//GEN-LAST:event_HelpActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        //this method shows some information about the developer and the project
        //nothing else to comment here
        About_Dialog.setVisible(true);

        About_Dialog.setSize(400, 400);
        About_Dialog.setResizable(false);

        image.setSize(About_Dialog.getWidth() - 20, About_Dialog.getHeight() - 20);
        image.setLocation(About_Dialog.getX(), About_Dialog.getY());

        about_text.setVisible(false);
        ImageIcon aboutImage = new ImageIcon(".\\logo1.jpg");
        image.setIcon(utils.turnImage(aboutImage, image));

        About_Dialog.setTitle("Smartpad v1.0.1 beta");
        about_text.setText("<html> Smartpad v1.0.1 beta release. Developed by Bolkas Pavlos");

    }//GEN-LAST:event_AboutActionPerformed

    private void insert_wordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insert_wordActionPerformed
        //this method is called when we want to add a new word to our database of correct words
        //store into string the word that we want to add
        String toIns = theTextPanel.getSelectedText();
        //calls the method that inserts this word to the database
        utils.insertToFile(toIns);
    }//GEN-LAST:event_insert_wordActionPerformed

    private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed
        //cuts a piece of text
        theTextPanel.cut();
    }//GEN-LAST:event_CutActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        //copies a piece of text
        theTextPanel.copy();
    }//GEN-LAST:event_CopyActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        theTextPanel.cut();
    }//GEN-LAST:event_cutActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        theTextPanel.copy();
    }//GEN-LAST:event_copyActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        theTextPanel.paste();
    }//GEN-LAST:event_pasteActionPerformed

    private void insert_to_DictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insert_to_DictActionPerformed
        //this method inserts the selected word to the database of the right words
        String toIns = theTextPanel.getSelectedText();
        utils.insertToFile(toIns);
    }//GEN-LAST:event_insert_to_DictActionPerformed

    private void toolSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolSaveActionPerformed
        save();//this method calls another method to save the file
    }//GEN-LAST:event_toolSaveActionPerformed

    private void tool_SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_SaveAsActionPerformed
        saveAs();//this method save a file if it is created now
    }//GEN-LAST:event_tool_SaveAsActionPerformed

    private void tool_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_OpenActionPerformed
        open();//this method calls another to open a text file

    }//GEN-LAST:event_tool_OpenActionPerformed

    private void checkThisWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkThisWordActionPerformed
        //this method checks just one word if it is right or wrong
        //this method is called when user right clicks int the textarea and selects a text and the option to check just this word
        //store the selected word in a string
        String word = theTextPanel.getSelectedText();
        //print the word (this was added for the developer to see)
        System.out.println(word);
        //calls the checkOne method and puts what it returns to the word variable
        word = utils.checkOne(word);
        //prints the new word (check for the developer)
        System.out.println(word);
        //replaces in the textpanel the selected text with the correct one
        theTextPanel.replaceSelection(word);
    }//GEN-LAST:event_checkThisWordActionPerformed

    private void fastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastActionPerformed
        //this method is called when user clicks on the correct button to make the file correct

    }//GEN-LAST:event_fastActionPerformed

    private void undoOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoOperationActionPerformed
        //this method undoes the actions taken in the textpanel
        //and its called when user clicks on the undo button
        um.undo();
    }//GEN-LAST:event_undoOperationActionPerformed

    private void redoOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoOperationActionPerformed
        //this method redoes the actions that had been undone in the textpanel
        //and it's called when user clicks on the redo button
        um.redo();
    }//GEN-LAST:event_redoOperationActionPerformed
    Thread correctWithProbablesThread;
    private void correctIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correctIconActionPerformed
        correctWithProbablesThread = new Thread() {
            public synchronized void run() {
                substitute();//call method substitute

            }
        };
//this method is called when user clicks on the correct button to make the file correct
        if (((String) this.correctWithProbablesThread.getState().toString()).equals("TERMINATED")) {
            System.out.println("thread has terminated");
            //this.correctWithProbablesThread.run();

        } else {
            this.correctWithProbablesThread.start();
        }

    }//GEN-LAST:event_correctIconActionPerformed

    private void undoIconOnBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoIconOnBarActionPerformed
        //this method undoes the actions taken in the textpanel
        //and its called when user clicks on the undo button
        um.undo();
    }//GEN-LAST:event_undoIconOnBarActionPerformed

    private void redoIconOnBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoIconOnBarActionPerformed
        //this method redoes the actions that had been undone in the textpanel
        //and it's called when user clicks on the redo button
        um.redo();
    }//GEN-LAST:event_redoIconOnBarActionPerformed

    private void fontSizesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizesActionPerformed
        //this method changes the font size in the text panel
        Font f = theTextPanel.getFont();
        float size = Float.parseFloat(fontSizes.getSelectedItem() + "");
        theTextPanel.setFont(f.deriveFont(size));

    }//GEN-LAST:event_fontSizesActionPerformed

    private void fontsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontsActionPerformed
        //this method changes the font int the text panel
        String theFont = (String) fonts.getSelectedItem();
        Font f = theTextPanel.getFont();
        Font f1 = new Font(theFont, f.getStyle(), f.getSize());
        theTextPanel.setFont(f1);
    }//GEN-LAST:event_fontsActionPerformed

    private void theTextPanelCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_theTextPanelCaretUpdate
        //this method is called on caret update to count the words and the characters
        counts();
    }//GEN-LAST:event_theTextPanelCaretUpdate

    private void theTextPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_theTextPanelMouseClicked

    }//GEN-LAST:event_theTextPanelMouseClicked

    private void theTextPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_theTextPanelMousePressed

    }//GEN-LAST:event_theTextPanelMousePressed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        
        System.out.println("state before next " + this.correctWithProbablesThread.getState());
        changeDone();
        System.out.println("state after next " + this.correctWithProbablesThread.getState());
    }//GEN-LAST:event_nextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new Notepad().setVisible(true);
            }
        });
    }
    String chars;//in this var is stored the character count
    String words;//in this var is stored the word count

    void counts() {

        String str = theTextPanel.getText();
        chars = (String.valueOf(str.length()));

        String[] strsplit = str.split("\\s");

        words = (String.valueOf(strsplit.length));

        countWC.setText("<html>Characters : " + chars + " Words : " + words + " ");

    }

    void open() {
        //create filereader object to read a file
        FileReader fw;
        //variable to store the filename
        String filen = "";
        //sets preffered file extensions
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt");
        //sets the filter for the file extenssions to the file chooser
        choose.setFileFilter(filter);
        //stores the selection that user makes when is shown the file chooser
        int returnVal = choose.showOpenDialog(this);
        //stores the selected file to an object
        Object fileobject = choose.getSelectedFile();
        //if the fileobject contains something and the user pressed ok in the file chooser
        if (fileobject != null && returnVal == JFileChooser.APPROVE_OPTION) {
            //filename = the path that the file exists
            filen = choose.getSelectedFile().getPath();
            //the name is the filename
            name = filen;
            //sets the title of the window to the filename
            this.setTitle(filen);

            //if the filename is space
            if (filen.equals("")) {
                //do nothing there has not been selected any file
            } else {//else read the file
                try {
                    //open the file
                    fw = new FileReader(filen);
                    //read the file and write it to the Text Panel
                    theTextPanel.read(fw, null);
                    //close the file
                    fw.close();

                } catch (IOException ex) {
                    System.out.println(ex.getCause());
                }

            }
        } else if (fileobject != null && returnVal == JFileChooser.CANCEL_OPTION) {
            //if user selected a file and pressed cancel do nothing
        }
    }

    //method to save what is typed or loaded to a file
    void save() {
        //create an object to write to the disk
        FileWriter fw;
        //if a name exists
        if (!name.equals("")) {
            try {
                //open the file or a create a new file
                fw = new FileWriter(name);
                //read the textpanel and write it in the file
                theTextPanel.write(fw);
                //close the file
                fw.close();
            } catch (IOException ex) {
                System.out.println(ex.getCause());
            }
        } else {

        }
    }

    void saveAs() {
        FileWriter fw;
        String filen = "";
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt");
        choose.setFileFilter(filter);
        int returnVal = choose.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            filen = choose.getSelectedFile().getPath();
            this.setTitle(filen);
            name = filen;
            if (filen.equals("")) {
            } else {
                try {
                    fw = new FileWriter(filen);
                    theTextPanel.write(fw);
                    fw.close();
                } catch (IOException ex) {
                }
            }
        }
    }
    /*Thread correctWithProbablesThread = new Thread() {
     public synchronized void run() {
     substitute();//call method substitute
    
     }
     };*/

    //thus method makes the substitute method to wait until user presses next button
    Thread stopCorrect = new Thread() {

        @Override
        public synchronized void run() {
            while (done) {//while done is true
                try {
                    changeDone();//make done true and notify all the threads
                    stopCorrect.wait();//wait until done is true, it only gets true when user presses next
                } catch (InterruptedException ex) {
                    Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    };
    boolean done = false;

    synchronized void substitute() {
        System.out.println("correctWithProbables");//this is used for the developer to see what method is used

        String text = theTextPanel.getText(); //get the text of all the panel
        Text textWithProbable = new Text().seperated(text); // seperate into different lists that will be combined in one object the TEXT obejct
        theTextPanel.setText(textWithProbable.getPureText()); // get pure text of this object
        theText = textWithProbable; // set the notepad variable setted as the text we proccessed earlier
        int balance = 0;//variable to store the difference between the wrong word and the correct word in characters
        DoubleLinkedList words = theText.getWords(); //take the list of all the words
        DoubleNode node = words.getFirstNode(); //get the first word of them
        int size = words.size(); //get the size of all words list
        int psize; //size of the probable words for each word list
        DoubleNode probableNode; //a probable word that is in the probables of each word list
        JMenuItem item;//item that will be in word selector
        Word underCorrection;

        for (int i = 0; i < size; i++) {
            underCorrection = ((Word) node.getItem());

            wordSelector.removeAllItems(); //clear combo box
            wordSelector.addItem("");
            psize = ((Word) node.getItem()).getList().size();//get size of probables for the n-th word
            probableNode = ((Word) node.getItem()).getList().getFirstNode(); // get the first probable word of the n-th word
            theTextPanel.select(underCorrection.getBegin(), underCorrection.getEnd() + 1);
            for (int j = 0; j < psize; j++) { //for each of the n probable words
                Word prob = ((Word) probableNode.getItem()); //take the word from inside the node
                System.out.println(underCorrection.toString());
                //item = new JMenuItem(prob.getTheWord()); //put the string of the word inside the item object
                System.out.println("prob=" + prob.getTheWord());
                //item.putClientProperty(prob.getSerial(), prob); //put client property the whole object of tis word
                wordSelector.addItem(prob.getTheWord()); // add the n-th probable word to the word selector
                probableNode = probableNode.getNext(); // take the next probable word
                //theTextPanel.select(((int)underCorrection.getBegin() + balance), ((int)((underCorrection.getEnd() + 1) + balance)));

                if ((((String) wordSelector.getSelectedItem()).length() < theTextPanel.getSelectedText().length())
                        || (((String) wordSelector.getSelectedItem()).length() > theTextPanel.getSelectedText().length())) {
                    balance += ((int) (((String) wordSelector.getSelectedItem()).length() - theTextPanel.getSelectedText().length()));
                } /*else if (((Word) wordSelector.getSelectedItem()).getLength() > theTextPanel.getSelectedText().length()) {
                 balance += ((Word) wordSelector.getSelectedItem()).getLength() - theTextPanel.getSelectedText().length();
                 }*/

            }
            System.out.println("state inside " + this.correctWithProbablesThread.getState());
            try {
                while (!done) { // while done false
                    wait(); //wait until user presses next and thread continues executing, took me a whole day to make this work

                }
            } catch (InterruptedException ex) {
                Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            }
            theTextPanel.select(underCorrection.getBegin(), (int) (underCorrection.getEnd() + 1));
            System.out.println("begin=" + underCorrection.getBegin());
            System.out.println("end=" + (int) (underCorrection.getEnd() + 1));
            /*try {
             sleep(10000);
             } catch (InterruptedException ex) {
             Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
             }*/
            for (int a = 0; a < 1; a++) {
                //processor needs some time because some code is mixed
            }
            theTextPanel.replaceSelection(wordSelector.getSelectedItem() + "");
            done = false;//done is false to give user chance to change the next word

            node = node.getNext();// get the next node ( possibly wrong word )
        }

    }

    synchronized void changeDone() {
        done = true;
        System.out.println("done=" + done);
        notifyAll();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JDialog About_Dialog;
    private javax.swing.JMenuItem Check;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem Save_as;
    private javax.swing.JLabel about_text;
    private javax.swing.JMenuItem checkThisWord;
    private javax.swing.JFileChooser choose;
    private javax.swing.JMenuItem clear;
    private javax.swing.JMenuItem copy;
    private javax.swing.JButton correctIcon;
    private javax.swing.JLabel countWC;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenuItem fast;
    private javax.swing.JComboBox fontSizes;
    private javax.swing.JComboBox fonts;
    private javax.swing.JLabel image;
    private javax.swing.JMenuItem insert_to_Dict;
    private javax.swing.JMenuItem insert_word;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JTextArea myText;
    private javax.swing.JButton next;
    private javax.swing.JPanel pan;
    private javax.swing.JMenuItem paste;
    private javax.swing.JPopupMenu rclick;
    private javax.swing.JButton redoIconOnBar;
    private javax.swing.JMenuItem redoOperation;
    private javax.swing.JTextPane theTextPanel;
    private javax.swing.JButton toolSave;
    private javax.swing.JButton tool_Open;
    private javax.swing.JButton tool_SaveAs;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JButton undoIconOnBar;
    private javax.swing.JMenuItem undoOperation;
    private javax.swing.JComboBox wordSelector;
    // End of variables declaration//GEN-END:variables
    //under here there are useless methods
    /*
     public void fastEdition() {
     //myText.setText(theTextPanel.getText());
     String text = myText.getText();

     DoubleLinkedList wordList = utils.fifthEditionCorrection(text.substring(position,text.length()));

     DoubleNode node = wordList.getFirstNode();
     JPopupMenu prob;

     while (node != null) {
     if (node.getItem() instanceof Word) {
     String word = (((Word) node.getItem()).getTheWord());

     System.out.println("position=" + position + " wordLength=" + word.length());
     //
     myText.replaceRange(word, position, word.length() + position);
                
     prob = new JPopupMenu("");
     myText.setCaretPosition(position + word.length());

     MListen lstnr = new MListen(prob, myText);

     DoubleLinkedList probs = (((Word) node.getItem()).getList());
     DoubleNode probNode = probs.getFirstNode();
     for (int j = 0; j < probs.size(); j++) {
     if (probNode.getItem() instanceof Word) {

     Word w = ((Word) probNode.getItem());

     JMenuItem item = new JMenuItem(w.getTheWord());

     w.setBegin(position);
     w.setEnd((word).length() + position);

     item.putClientProperty(w.getTheWord(), w);

     //item.addMouseListener(lstnr);
     MListen al=new MListen(prob,myText);
     item.addMouseListener(al);

     prob.add(item);

     probNode = probNode.getNext();
     }
     }
                
     Rectangle rectangle = new Rectangle();
     position += word.length();
     try {
     rectangle = myText.modelToView(myText.getCaretPosition());
     } catch (BadLocationException ex) {
     Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
     }
     prob.show(this, (int) rectangle.getX() - (int) rectangle.width, (int) rectangle.getY()+100);

     } else {
     position += 1;
     }

     node = node.getNext();
     }
     wordList = new DoubleLinkedList();
     }
     */
    /*
     void correctText() {
     text = theTextPanel.getText();
     //text = utils.newCorrection(text);
     text = utils.thirdCor(text);
     theTextPanel.setText(text);
     text = "";
     }*/

    /*
     //this method fills the combobox with available fonts
     void fillFonts() {
     Font f = theTextPanel.getFont();
    
     String fontsList[] = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    
     for (int i = 0; i < fontsList.length; i++) {
     fonts.addItem(fontsList[i]);
     }
     }*/
}
